<p><strong>The Intel Management Engine: a Tragedy of Modern Computing</strong></p>
<p><em><strong>Abstract</strong></em></p>
<p>First introduced in June 2006, the Intel Management Engine (ME) is a subsystem included in the chipset of virtually every processor designed by Intel. It provides several features, most of which are either intended to be security benefits or suited for large-scale IT management. The ME consists of a single-core processor that runs MINIX, a small but fully-functional Unix-based operating system, with full access to an entire system including memory and networking. The level of control over any computer with an Intel CPU raises serious concern in terms of user privacy and security. Not only does this technology have the potential for mass surveillance, numerous vulnerabilities have been discovered that exploit the practically unrestricted level of access to data by the ME.</p>
<p><em><strong>Background</strong></em></p>
<p>The Intel Management Engine is physically located not on an actual processor chip, but on a motherboard compatible with Intel CPUs. It is part of the Platform Controller Hub (PCH), along with controllers for display, I/O, and the system clock. Communication with the CPU done through a protocol known as the Host Embedded Controller Interface (HECI), though it has its own dedicated connection to the network interface [2].</p>
<p>TheThe intended purpose of the IME is to provide Intel-specific features such as AMT (Active Management Technology), a tool that allows professionals in IT to manage and diagnose computers remotely [3]. Most other features aim to provide security benefits, including TPM (Trusted Platform Module) to authenticate devices, AT (Anti-Theft Technology), Secure Boot, and Boot Guard [2].</p>
<p>The x86 architecture segregates operating system processes based on different levels of control over hardware, software, and data. Known as privilege rings, protection rings, or hierarchical protection domains: Ring 0 is for the OS kernel, Rings 1 and 2 are for device drivers, and Ring 3 is for user applications. Device drivers are typically included as part of the kernel on Linux and macOS, whereas Windows often requires installing drivers. On Intel's x86, there exist protection rings even below Ring 0, often unofficially referred to with negative integers. Ring -1 is Hypervisor Mode, used to isolate a virtual machine from the OS on which it runs. Ring -2 is System Management Mode, which is for managing power and similar functions normal when normal CPU execution is not taking place. Ring -3, the layer with the highest level of privilege, is where the Intel Management Engine operates.</p>
<p><em><strong>Security Flaws and Concerns</strong></em></p>
<p>As long as a computer with a modern Intel CPU is plugged in to a power source, the Intel Management Engine is always running. This includes when the system is turned off or in hibernation [1]. Along with the design that allows control over anything via the CPU and direct network access , this creates a single point of failure to be exploited by malware. Since the ME runs at such a low level on hardware (Ring -3), any compromised execution cannot be seen with tools that show running processes (e.g. Task Manager on Windows, htop on Linux).</p>
<p>The ME is not open source software, so users or security researchers cannot simply analyze the source code. There is some information available about its design and use of its features, but overall the ME is known to be poorly documented [2]. There are some unofficial, unsupported methods for disabling parts of the subsystem. However, individuals may risk causing unexpected behavior or destroying the motherboard. Interest in developing more reliable mitigation remains, but some aspects of the design make reverse-engineering very complicated [1].</p>
<p>Exploitation by malicious attackers is not just a potential based on the design alone. Numerous vulnerabilities have been discovered and demonstrated as proof-of-concept. The ME has a Java Virtual Machine used for its parts that are written in Java. The previously mentioned AMT feature allows the ME to load and execute arbitrary Java applets [3]. Researchers have found classes in the Java source code for cryptography, flash memory, and dynamically loading applications [1]. Since the IME’s own memory is very small, it often locks a portion of main RAM for use. It is possible to enlarge the size of this dedicated portion, allowing the ME to read contents of memory used by the main operating system during the next boot [3]. These are only a few of several vulnerabilities that have been discovered independently. One particularly frightening example involves a rootkit and a keystroke logger.</p>
<p>A system compromised by malware it not the only concern with the Intel Management Engine. There is also an issue of privacy. Less malicious actors like Intel and other vendors have the ability to aggregate massive amounts of interaction data without the user’s knowledge, such as location information and telemetry. Additionally, the potential ability for Intel to easily access any data in RAM or ROM should not be overlooked. There has been some speculation about the ME containing a backdoor.</p>
<p><em><strong>Conclusion</strong></em></p>
<p>Users have very limited options in terms of avoiding the Intel Management Engine. Modern AMD processors have similar, though slightly less egregious technology as part of their chipsets. Since Intel and AMD dominate the consumer market for general-purpose CPUs, avoiding the ME requires settling for lower-spec hardware. Raspberry Pi uses ARM processors and the latest model is available with a reasonable 8GB of RAM and a 4-core CPU. However, these are only viable as desktop computers. Laptop users avoiding the ME are limited to models released before approximately 2008. Most, if not all, of these processors have at best 2-core 32-bit CPUs, which support a maximum of 4GB of RAM. Others who have purchased CPUs before learning about the ME may find it more practical to reluctantly accept its existence on their machines.</p>
<p>Nonetheless, even if hypothetically every known vulnerability was successfully patched, the implementation of the Intel Management Engine has set a dangerous precedent for modern computing.</p>
<p><em><strong>Works Cited</strong></em></p>
<p>[1] I. Skochinky, “Intel ME Secrets: Hidden code in your chipset and how to discover exactly what it does,” Presented at RECON 2014, Montreal, 2014</p>
<p>[2] M. Ermolov and M. Goryachy, “Inside Intel Management Engine,” Presented at 34th Chaos Communication Conference, Leipzig, 2017</p>
<p>[3] A. Ogulyuk, A. Sheglov, and K. Sheglov, “UEFI BIOS and Intel Management Engine Attack Vectors and Vulnerabilities,” In Proc. 20th Conference of Fruct Association, St. Peterburg, Russia, 2016</p>
<p><em><strong>Other Sources Consulted</strong></em></p>
<p><a href="https://en.wikipedia.org/wiki/Protection_ring">https://en.wikipedia.org/wiki/Protection_ring</a></p>
<p><a href="https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it">https://www.eff.org/deeplinks/2017/05/intels-management-engine-security-hazard-and-users-need-way-disable-it</a></p>
<p><a href="">https://hardenedlinux.github.io/firmware/2016/11/17/neutralize_ME_firmware_on_sandybridge_and_ivybridge.html</a></p>
<p><a href="">https://software.intel.com/content/www/us/en/develop/articles/getting-started-with-intel-active-management-technology-amt.html</a></p>
<p><a href="">https://en.wikichip.org/wiki/intel/management_engine</a></p>
<p><a href="">https://news.softpedia.com/news/intel-x86-cpus-come-with-a-secret-backdoor-that-nobody-can-touch-or-disable-505347.shtml</a></p>
